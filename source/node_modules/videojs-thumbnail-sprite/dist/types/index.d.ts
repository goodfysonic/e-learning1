import videojs from 'video.js';
declare const Plugin: {
    new (player: import("./types/video.js").VideoJsPlayer, options?: any): videojs.Plugin;
    prototype: videojs.Plugin;
    BASE_PLUGIN_NAME: string;
    deregisterPlugin(name: string): void;
    getPlugin(name: string): any;
    getPluginVersion(name: string): string;
    getPlugins(names?: string[] | undefined): {
        [name: string]: videojs.Plugin;
    };
    isBasic(plugin: string | (() => any)): boolean;
    registerPlugin<T, K>(name: string, plugin: (this: import("./types/video.js").VideoJsPlayer, ...options: K[]) => T): (...options: K[]) => T;
    registerPlugin<T_1 extends any>(name: string, plugin: T_1): () => T_1;
};
declare class ThumbnailSprite extends Plugin {
    private options;
    constructor(player: videojs.Player, options?: ThumbnailSprite.Options);
}
declare namespace ThumbnailSprite {
    interface Options {
        sprites: Array<Sprite>;
    }
    interface Sprite {
        url: string;
        start: number;
        duration: number;
        width: number;
        height: number;
        interval: number;
    }
    interface IIndexableComponent extends videojs.Component {
        [key: string]: any;
    }
}
export default ThumbnailSprite;
//# sourceMappingURL=index.d.ts.map