{"ast":null,"code":"var _s = $RefreshSig$();\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport styles from './index.module.scss';\nimport React, { useMemo } from 'react';\nimport { Form, Upload } from 'antd';\nimport ImgCrop from 'antd-img-crop';\nimport { PlusOutlined, LoadingOutlined } from '@ant-design/icons';\nimport useFormField from '@hooks/useFormField';\nimport { showErrorMessage } from '@services/notifyService';\nfunction CropImageField({\n  label,\n  fileList,\n  disabled,\n  name,\n  valuePropName,\n  accept,\n  onChange,\n  beforeUpload,\n  showUploadList,\n  aspect = 1,\n  maxFile,\n  imageUrl,\n  loading,\n  style,\n  required,\n  formItemProps,\n  imgUploadedSizeAuto,\n  ...props\n}) {\n  _s();\n  const {\n    rules\n  } = useFormField(props);\n  const onUploadFile = ({\n    file,\n    onSuccess,\n    onError\n  }) => {\n    const {\n      uploadFile\n    } = props;\n    uploadFile(file, onSuccess, onError);\n  };\n  const getContent = () => {\n    if (imageUrl && !loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          margin: 4\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        style: {\n          maxWidth: '100%',\n          objectFit: 'contain'\n        },\n        className: \"img-uploaded\",\n        src: imageUrl,\n        alt: \"field-upload\"\n      }));\n    } else if (showUploadList && fileList && fileList.length === maxFile) {\n      return null;\n    } else {\n      return renderUploadButton();\n    }\n  };\n  const renderUploadButton = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"upload-wrapper\"\n    }, !showUploadList && loading ? /*#__PURE__*/React.createElement(LoadingOutlined, null) : /*#__PURE__*/React.createElement(PlusOutlined, null), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ant-upload-text\"\n    }, loading ? 'Đang tải lên' : 'Tải lên'));\n  };\n  const uploadClass = useMemo(() => {\n    return ['avatar-uploader', imgUploadedSizeAuto && 'img-uploaded-size-auto'].filter(Boolean).join(' ');\n  }, []);\n  const handleBeforeUpload = file => {\n    const isPNG = file.type === 'image/png';\n    if (!isPNG) {\n      showErrorMessage(`${file.name} is not a png file`);\n    }\n    return isPNG || Upload.LIST_IGNORE;\n  };\n  return /*#__PURE__*/React.createElement(Form.Item, _extends({}, formItemProps, {\n    required: required,\n    label: label,\n    name: name,\n    rules: rules,\n    valuePropName: valuePropName\n  }), showUploadList ? /*#__PURE__*/React.createElement(ImgCrop, {\n    aspect: aspect\n  }, /*#__PURE__*/React.createElement(Upload, {\n    fileList: fileList,\n    disabled: disabled,\n    accept: accept,\n    name: \"field-upload\",\n    listType: \"picture-card\",\n    style: {\n      width: '100%'\n    },\n    customRequest: onUploadFile,\n    beforeUpload: beforeUpload ?? handleBeforeUpload,\n    onChange: onChange,\n    className: uploadClass\n  }, getContent())) : /*#__PURE__*/React.createElement(ImgCrop, {\n    aspect: aspect\n  }, /*#__PURE__*/React.createElement(Upload, {\n    disabled: disabled,\n    accept: accept,\n    valuePropName: valuePropName,\n    listType: \"picture-card\",\n    style: {\n      width: '100%'\n    },\n    showUploadList: false,\n    customRequest: onUploadFile,\n    beforeUpload: beforeUpload,\n    onChange: onChange,\n    className: uploadClass\n  }, getContent())));\n}\n_s(CropImageField, \"luALdr2a7d7KzBUD81/M0KuGEvw=\", false, function () {\n  return [useFormField];\n});\n_c = CropImageField;\nexport default CropImageField;\nvar _c;\n$RefreshReg$(_c, \"CropImageField\");","map":{"version":3,"names":["styles","React","useMemo","Form","Upload","ImgCrop","PlusOutlined","LoadingOutlined","useFormField","showErrorMessage","CropImageField","label","fileList","disabled","name","valuePropName","accept","onChange","beforeUpload","showUploadList","aspect","maxFile","imageUrl","loading","style","required","formItemProps","imgUploadedSizeAuto","props","_s","rules","onUploadFile","file","onSuccess","onError","uploadFile","getContent","createElement","margin","maxWidth","objectFit","className","src","alt","length","renderUploadButton","uploadClass","filter","Boolean","join","handleBeforeUpload","isPNG","type","LIST_IGNORE","Item","_extends","listType","width","customRequest","_c","$RefreshReg$"],"sources":["C:/Users/PC/Downloads/elms-cms/elms-cms/source/src/components/common/form/CropImageField/index.js"],"sourcesContent":["import styles from './index.module.scss';\r\n\r\nimport React, { useMemo } from 'react';\r\n\r\nimport { Form, Upload } from 'antd';\r\nimport ImgCrop from 'antd-img-crop';\r\n\r\nimport { PlusOutlined, LoadingOutlined } from '@ant-design/icons';\r\nimport useFormField from '@hooks/useFormField';\r\nimport { showErrorMessage } from '@services/notifyService';\r\n\r\nfunction CropImageField({\r\n    label,\r\n    fileList,\r\n    disabled,\r\n    name,\r\n    valuePropName,\r\n    accept,\r\n    onChange,\r\n    beforeUpload,\r\n    showUploadList,\r\n    aspect = 1,\r\n    maxFile,\r\n    imageUrl,\r\n    loading,\r\n    style,\r\n    required,\r\n    formItemProps,\r\n    imgUploadedSizeAuto,\r\n    ...props\r\n}) {\r\n    const { rules } = useFormField(props);\r\n\r\n    const onUploadFile = ({ file, onSuccess, onError }) => {\r\n        const { uploadFile } = props;\r\n        uploadFile(file, onSuccess, onError);\r\n    };\r\n\r\n    const getContent = () => {\r\n        if (imageUrl && !loading) {\r\n            return (\r\n                <div style={{ margin: 4 }}>\r\n                    <img\r\n                        style={{ maxWidth: '100%', objectFit: 'contain' }}\r\n                        className=\"img-uploaded\"\r\n                        src={imageUrl}\r\n                        alt=\"field-upload\"\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (showUploadList && fileList && fileList.length === maxFile) {\r\n            return null;\r\n        } else {\r\n            return renderUploadButton();\r\n        }\r\n    };\r\n\r\n    const renderUploadButton = () => {\r\n        return (\r\n            <div className=\"upload-wrapper\">\r\n                {!showUploadList && loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n                <div className=\"ant-upload-text\">{loading ? 'Đang tải lên' : 'Tải lên'}</div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const uploadClass = useMemo(() => {\r\n        return ['avatar-uploader', imgUploadedSizeAuto && 'img-uploaded-size-auto'].filter(Boolean).join(' ');\r\n    }, []);\r\n\r\n    const handleBeforeUpload = (file) => {\r\n        const isPNG = file.type === 'image/png';\r\n        if (!isPNG) {\r\n            showErrorMessage(`${file.name} is not a png file`);\r\n        }\r\n        return isPNG || Upload.LIST_IGNORE;\r\n    };\r\n\r\n    return (\r\n        <Form.Item\r\n            {...formItemProps}\r\n            required={required}\r\n            label={label}\r\n            name={name}\r\n            rules={rules}\r\n            valuePropName={valuePropName}\r\n        >\r\n            {showUploadList ? (\r\n                <ImgCrop aspect={aspect}>\r\n                    <Upload\r\n                        fileList={fileList}\r\n                        disabled={disabled}\r\n                        accept={accept}\r\n                        name=\"field-upload\"\r\n                        listType=\"picture-card\"\r\n                        style={{ width: '100%' }}\r\n                        customRequest={onUploadFile}\r\n                        beforeUpload={beforeUpload ?? handleBeforeUpload}\r\n                        onChange={onChange}\r\n                        className={uploadClass}\r\n\r\n                    >\r\n                        {getContent()}\r\n                    </Upload>\r\n                </ImgCrop>\r\n            ) : (\r\n                <ImgCrop aspect={aspect}>\r\n                    <Upload\r\n                        disabled={disabled}\r\n                        accept={accept}\r\n                        valuePropName={valuePropName}\r\n                        listType=\"picture-card\"\r\n                        style={{ width: '100%' }}\r\n                        showUploadList={false}\r\n                        customRequest={onUploadFile}\r\n                        beforeUpload={beforeUpload}\r\n                        onChange={onChange}\r\n                        className={uploadClass}\r\n                    >\r\n                        {getContent()}\r\n                    </Upload>\r\n                </ImgCrop>\r\n            )}\r\n        </Form.Item>\r\n    );\r\n}\r\n\r\nexport default CropImageField;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}