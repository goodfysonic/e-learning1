{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { getSubject, createSubject, updateSubject } from './subjectService';\nimport { Form, Input, Button, message } from 'antd';\nconst SubjectSavePage = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get the subject ID from URL if present\n  const navigate = useNavigate();\n  const [form] = Form.useForm();\n  const isNewSubject = !id;\n  useEffect(() => {\n    if (!isNewSubject) {\n      loadSubject();\n    }\n  }, [id]);\n  const loadSubject = async () => {\n    try {\n      const {\n        data\n      } = await getSubject(id);\n      form.setFieldsValue(data);\n    } catch (error) {\n      message.error('Failed to load the subject');\n    }\n  };\n  const handleSubmit = async values => {\n    try {\n      if (isNewSubject) {\n        await createSubject(values);\n        message.success('Subject created successfully!');\n      } else {\n        await updateSubject(id, values);\n        message.success('Subject updated successfully!');\n      }\n      navigate('/subjects'); // Redirect to the subject list page\n    } catch (error) {\n      message.error('Failed to save the subject');\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"h1\", null, isNewSubject ? 'Create New Subject' : 'Edit Subject'), /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    onFinish: handleSubmit,\n    layout: \"vertical\"\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"subjectName\",\n    label: \"Subject Name\",\n    rules: [{\n      required: true,\n      message: 'Please input the subject name!'\n    }]\n  }, /*#__PURE__*/React.createElement(Input, null)), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"subjectCode\",\n    label: \"Subject Code\",\n    rules: [{\n      required: true,\n      message: 'Please input the subject code!'\n    }]\n  }, /*#__PURE__*/React.createElement(Input, null)), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"description\",\n    label: \"Description\"\n  }, /*#__PURE__*/React.createElement(Input.TextArea, null)), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, isNewSubject ? 'Create' : 'Update')));\n};\n_s(SubjectSavePage, \"2ivoqBq1mC56BMg/IsESvMR8bL4=\", false, function () {\n  return [useParams, useNavigate, Form.useForm];\n});\n_c = SubjectSavePage;\nexport default SubjectSavePage;\nvar _c;\n$RefreshReg$(_c, \"SubjectSavePage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","getSubject","createSubject","updateSubject","Form","Input","Button","message","SubjectSavePage","_s","id","navigate","form","useForm","isNewSubject","loadSubject","data","setFieldsValue","error","handleSubmit","values","success","createElement","onFinish","layout","Item","name","label","rules","required","TextArea","type","htmlType","_c","$RefreshReg$"],"sources":["C:/Users/PC/Downloads/elms-cms/elms-cms/source/src/modules/Subject/SubjectSavePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { getSubject, createSubject, updateSubject } from './subjectService';\r\nimport { Form, Input, Button, message } from 'antd';\r\n\r\nconst SubjectSavePage = () => {\r\n  const { id } = useParams(); // Get the subject ID from URL if present\r\n  const navigate = useNavigate();\r\n  const [form] = Form.useForm();\r\n  const isNewSubject = !id;\r\n\r\n  useEffect(() => {\r\n    if (!isNewSubject) {\r\n      loadSubject();\r\n    }\r\n  }, [id]);\r\n\r\n  const loadSubject = async () => {\r\n    try {\r\n      const { data } = await getSubject(id);\r\n      form.setFieldsValue(data);\r\n    } catch (error) {\r\n      message.error('Failed to load the subject');\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (values) => {\r\n    try {\r\n      if (isNewSubject) {\r\n        await createSubject(values);\r\n        message.success('Subject created successfully!');\r\n      } else {\r\n        await updateSubject(id, values);\r\n        message.success('Subject updated successfully!');\r\n      }\r\n      navigate('/subjects'); // Redirect to the subject list page\r\n    } catch (error) {\r\n      message.error('Failed to save the subject');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>{isNewSubject ? 'Create New Subject' : 'Edit Subject'}</h1>\r\n      <Form form={form} onFinish={handleSubmit} layout=\"vertical\">\r\n        <Form.Item name=\"subjectName\" label=\"Subject Name\" rules={[{ required: true, message: 'Please input the subject name!' }]}>\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item name=\"subjectCode\" label=\"Subject Code\" rules={[{ required: true, message: 'Please input the subject code!' }]}>\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item name=\"description\" label=\"Description\">\r\n          <Input.TextArea />\r\n        </Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          {isNewSubject ? 'Create' : 'Update'}\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubjectSavePage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}