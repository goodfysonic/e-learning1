{"ast":null,"code":"var _s = $RefreshSig$();\nimport { sendRequest } from '@services/api';\nimport { useCallback, useEffect, useState } from 'react';\nimport apiUrl from '@constants/apiConfig';\nimport useIsMounted from './useIsMounted';\nconst useFetch = (apiConfig, {\n  immediate = false,\n  mappingData,\n  params = {},\n  pathParams = {}\n} = {}) => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const isMounted = useIsMounted();\n  const execute = useCallback(async ({\n    onCompleted,\n    onError,\n    ...payload\n  } = {}, cancelType) => {\n    if (isMounted()) {\n      setLoading(true);\n      setError(null);\n    }\n    try {\n      const {\n        data\n      } = await sendRequest(apiConfig, {\n        params,\n        pathParams,\n        ...payload\n      }, cancelType);\n      if (!data.result && data.statusCode !== 200 && apiConfig.baseURL != apiUrl.account.loginBasic.baseURL) {\n        throw data;\n      }\n      if (isMounted()) {\n        !cancelType && setData(mappingData ? mappingData(data) : data);\n      }\n      onCompleted && onCompleted(data);\n      return data;\n    } catch (error) {\n      if (isMounted()) {\n        !cancelType && setError(error);\n      }\n      onError && onError(error);\n      return error;\n    } finally {\n      if (isMounted()) {\n        !cancelType && setLoading(false);\n      }\n    }\n  }, [apiConfig]);\n  useEffect(() => {\n    if (immediate) {\n      execute();\n    }\n  }, [execute, immediate]);\n  return {\n    loading,\n    execute,\n    data,\n    error,\n    setData\n  };\n};\n_s(useFetch, \"5EcYOhIGWJtJh1+i9U8BcpZqsnU=\", false, function () {\n  return [useIsMounted];\n});\nexport default useFetch;","map":{"version":3,"names":["sendRequest","useCallback","useEffect","useState","apiUrl","useIsMounted","useFetch","apiConfig","immediate","mappingData","params","pathParams","_s","loading","setLoading","data","setData","error","setError","isMounted","execute","onCompleted","onError","payload","cancelType","result","statusCode","baseURL","account","loginBasic"],"sources":["C:/Users/PC/Downloads/elms-cms/elms-cms/source/src/hooks/useFetch.js"],"sourcesContent":["import { sendRequest } from '@services/api';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport apiUrl from '@constants/apiConfig';\r\nimport useIsMounted from './useIsMounted';\r\n\r\nconst useFetch = (apiConfig, { immediate = false, mappingData, params = {}, pathParams = {} } = {}) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const isMounted = useIsMounted();\r\n    const execute = useCallback(\r\n        async ({ onCompleted, onError, ...payload } = {}, cancelType) => {\r\n            if (isMounted()) {\r\n                setLoading(true);\r\n                setError(null);\r\n            }\r\n            try {\r\n                const { data } = await sendRequest(apiConfig, { params, pathParams, ...payload }, cancelType);\r\n                if (!data.result && data.statusCode !== 200 && apiConfig.baseURL != apiUrl.account.loginBasic.baseURL) {\r\n                    throw data;\r\n                }\r\n                if (isMounted()) {\r\n                    !cancelType && setData(mappingData ? mappingData(data) : data);\r\n                }\r\n                onCompleted && onCompleted(data);\r\n                return data;\r\n            } catch (error) {\r\n                if (isMounted()) {\r\n                    !cancelType && setError(error);\r\n                }\r\n                onError && onError(error);\r\n                return error;\r\n            } finally {\r\n                if (isMounted()) {\r\n                    !cancelType && setLoading(false);\r\n                }\r\n            }\r\n        },\r\n        [apiConfig],\r\n    );\r\n    useEffect(() => {\r\n        if (immediate) {\r\n            execute();\r\n        }\r\n    }, [execute, immediate]);\r\n\r\n    return { loading, execute, data, error, setData };\r\n};\r\n\r\nexport default useFetch;\r\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,eAAe;AAC3C,SAASC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,YAAY,MAAM,gBAAgB;AAEzC,MAAMC,QAAQ,GAAGA,CAACC,SAAS,EAAE;EAAEC,SAAS,GAAG,KAAK;EAAEC,WAAW;EAAEC,MAAM,GAAG,CAAC,CAAC;EAAEC,UAAU,GAAG,CAAC;AAAE,CAAC,GAAG,CAAC,CAAC,KAAK;EAAAC,EAAA;EACnG,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMgB,SAAS,GAAGd,YAAY,CAAC,CAAC;EAChC,MAAMe,OAAO,GAAGnB,WAAW,CACvB,OAAO;IAAEoB,WAAW;IAAEC,OAAO;IAAE,GAAGC;EAAQ,CAAC,GAAG,CAAC,CAAC,EAAEC,UAAU,KAAK;IAC7D,IAAIL,SAAS,CAAC,CAAC,EAAE;MACbL,UAAU,CAAC,IAAI,CAAC;MAChBI,QAAQ,CAAC,IAAI,CAAC;IAClB;IACA,IAAI;MACA,MAAM;QAAEH;MAAK,CAAC,GAAG,MAAMf,WAAW,CAACO,SAAS,EAAE;QAAEG,MAAM;QAAEC,UAAU;QAAE,GAAGY;MAAQ,CAAC,EAAEC,UAAU,CAAC;MAC7F,IAAI,CAACT,IAAI,CAACU,MAAM,IAAIV,IAAI,CAACW,UAAU,KAAK,GAAG,IAAInB,SAAS,CAACoB,OAAO,IAAIvB,MAAM,CAACwB,OAAO,CAACC,UAAU,CAACF,OAAO,EAAE;QACnG,MAAMZ,IAAI;MACd;MACA,IAAII,SAAS,CAAC,CAAC,EAAE;QACb,CAACK,UAAU,IAAIR,OAAO,CAACP,WAAW,GAAGA,WAAW,CAACM,IAAI,CAAC,GAAGA,IAAI,CAAC;MAClE;MACAM,WAAW,IAAIA,WAAW,CAACN,IAAI,CAAC;MAChC,OAAOA,IAAI;IACf,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZ,IAAIE,SAAS,CAAC,CAAC,EAAE;QACb,CAACK,UAAU,IAAIN,QAAQ,CAACD,KAAK,CAAC;MAClC;MACAK,OAAO,IAAIA,OAAO,CAACL,KAAK,CAAC;MACzB,OAAOA,KAAK;IAChB,CAAC,SAAS;MACN,IAAIE,SAAS,CAAC,CAAC,EAAE;QACb,CAACK,UAAU,IAAIV,UAAU,CAAC,KAAK,CAAC;MACpC;IACJ;EACJ,CAAC,EACD,CAACP,SAAS,CACd,CAAC;EACDL,SAAS,CAAC,MAAM;IACZ,IAAIM,SAAS,EAAE;MACXY,OAAO,CAAC,CAAC;IACb;EACJ,CAAC,EAAE,CAACA,OAAO,EAAEZ,SAAS,CAAC,CAAC;EAExB,OAAO;IAAEK,OAAO;IAAEO,OAAO;IAAEL,IAAI;IAAEE,KAAK;IAAED;EAAQ,CAAC;AACrD,CAAC;AAACJ,EAAA,CA1CIN,QAAQ;EAAA,QAIQD,YAAY;AAAA;AAwClC,eAAeC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}