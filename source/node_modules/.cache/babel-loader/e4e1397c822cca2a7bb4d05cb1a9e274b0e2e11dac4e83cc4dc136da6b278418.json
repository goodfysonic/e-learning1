{"ast":null,"code":"const useFormField = ({\n  requiredMsg,\n  placeholder,\n  required,\n  rules,\n  initialValue,\n  fieldName,\n  dataDetail\n}) => {\n  // const { dataDetail } = useListBase();\n\n  const getRequiredMsg = () => {\n    // Use intl instead\n    return requiredMsg || 'Required';\n  };\n  const getPlaceHolder = () => {\n    if (placeholder) {\n      return placeholder;\n    } else if (required) {\n      return '';\n    }\n    return '';\n  };\n  const getRules = () => {\n    const rules = [];\n    if (required) {\n      rules.push({\n        required,\n        message: getRequiredMsg()\n      });\n    }\n    return rules;\n  };\n  const getInitValue = () => {\n    if (initialValue) {\n      return initialValue;\n    } else if (dataDetail && dataDetail[fieldName]) {\n      return dataDetail[fieldName];\n    } else return undefined;\n  };\n  const mergeRules = (rulesA, rulesB) => {\n    return [...rulesA, ...rulesB];\n  };\n  return {\n    placeholder: getPlaceHolder(),\n    rules: mergeRules(getRules(), rules || [])\n  };\n};\nexport default useFormField;","map":{"version":3,"names":["useFormField","requiredMsg","placeholder","required","rules","initialValue","fieldName","dataDetail","getRequiredMsg","getPlaceHolder","getRules","push","message","getInitValue","undefined","mergeRules","rulesA","rulesB"],"sources":["C:/Users/PC/Downloads/elms-cms/elms-cms/source/src/hooks/useFormField.js"],"sourcesContent":["const useFormField = ({ requiredMsg, placeholder, required, rules, initialValue, fieldName, dataDetail }) => {\r\n    // const { dataDetail } = useListBase();\r\n\r\n    const getRequiredMsg = () => {\r\n        // Use intl instead\r\n        return requiredMsg || 'Required';\r\n    };\r\n\r\n    const getPlaceHolder = () => {\r\n        if (placeholder) {\r\n            return placeholder;\r\n        } else if (required) {\r\n            return '';\r\n        }\r\n\r\n        return '';\r\n    };\r\n\r\n    const getRules = () => {\r\n        const rules = [];\r\n\r\n        if (required) {\r\n            rules.push({\r\n                required,\r\n                message: getRequiredMsg(),\r\n            });\r\n        }\r\n\r\n        return rules;\r\n    };\r\n\r\n    const getInitValue = () => {\r\n        if (initialValue) {\r\n            return initialValue;\r\n        } else if (dataDetail && dataDetail[fieldName]) {\r\n            return dataDetail[fieldName];\r\n        } else return undefined;\r\n    };\r\n\r\n    const mergeRules = (rulesA, rulesB) => {\r\n        return [ ...rulesA, ...rulesB ];\r\n    };\r\n\r\n    return {\r\n        placeholder: getPlaceHolder(),\r\n        rules: mergeRules(getRules(), rules || []),\r\n    };\r\n};\r\n\r\nexport default useFormField;\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGA,CAAC;EAAEC,WAAW;EAAEC,WAAW;EAAEC,QAAQ;EAAEC,KAAK;EAAEC,YAAY;EAAEC,SAAS;EAAEC;AAAW,CAAC,KAAK;EACzG;;EAEA,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzB;IACA,OAAOP,WAAW,IAAI,UAAU;EACpC,CAAC;EAED,MAAMQ,cAAc,GAAGA,CAAA,KAAM;IACzB,IAAIP,WAAW,EAAE;MACb,OAAOA,WAAW;IACtB,CAAC,MAAM,IAAIC,QAAQ,EAAE;MACjB,OAAO,EAAE;IACb;IAEA,OAAO,EAAE;EACb,CAAC;EAED,MAAMO,QAAQ,GAAGA,CAAA,KAAM;IACnB,MAAMN,KAAK,GAAG,EAAE;IAEhB,IAAID,QAAQ,EAAE;MACVC,KAAK,CAACO,IAAI,CAAC;QACPR,QAAQ;QACRS,OAAO,EAAEJ,cAAc,CAAC;MAC5B,CAAC,CAAC;IACN;IAEA,OAAOJ,KAAK;EAChB,CAAC;EAED,MAAMS,YAAY,GAAGA,CAAA,KAAM;IACvB,IAAIR,YAAY,EAAE;MACd,OAAOA,YAAY;IACvB,CAAC,MAAM,IAAIE,UAAU,IAAIA,UAAU,CAACD,SAAS,CAAC,EAAE;MAC5C,OAAOC,UAAU,CAACD,SAAS,CAAC;IAChC,CAAC,MAAM,OAAOQ,SAAS;EAC3B,CAAC;EAED,MAAMC,UAAU,GAAGA,CAACC,MAAM,EAAEC,MAAM,KAAK;IACnC,OAAO,CAAE,GAAGD,MAAM,EAAE,GAAGC,MAAM,CAAE;EACnC,CAAC;EAED,OAAO;IACHf,WAAW,EAAEO,cAAc,CAAC,CAAC;IAC7BL,KAAK,EAAEW,UAAU,CAACL,QAAQ,CAAC,CAAC,EAAEN,KAAK,IAAI,EAAE;EAC7C,CAAC;AACL,CAAC;AAED,eAAeJ,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}