{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { getSubjects, createSubject, updateSubject, deleteSubject, getSubject } from './subjectService';\nimport { message } from 'antd';\nconst useSubjects = () => {\n  _s();\n  const [subjects, setSubjects] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Fetch all subjects\n  const fetchSubjects = useCallback(async () => {\n    setLoading(true);\n    try {\n      const response = await getSubjects();\n      setSubjects(response.data);\n    } catch (error) {\n      message.error('Failed to fetch subjects');\n      console.error('Error fetching subjects:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    fetchSubjects();\n  }, [fetchSubjects]);\n\n  // Add a new subject\n  const addSubject = async subject => {\n    try {\n      const response = await createSubject(subject);\n      setSubjects([...subjects, response.data]);\n      message.success('Subject added successfully');\n    } catch (error) {\n      message.error('Failed to add subject');\n      console.error('Error adding subject:', error);\n    }\n  };\n\n  // Update an existing subject\n  const editSubject = async (id, subject) => {\n    try {\n      const response = await updateSubject(id, subject);\n      const updatedSubjects = subjects.map(subj => subj.id === id ? response.data : subj);\n      setSubjects(updatedSubjects);\n      message.success('Subject updated successfully');\n    } catch (error) {\n      message.error('Failed to update subject');\n      console.error('Error updating subject:', error);\n    }\n  };\n\n  // Delete a subject\n  const removeSubject = async id => {\n    try {\n      await deleteSubject(id);\n      setSubjects(subjects.filter(subject => subject.id !== id));\n      message.success('Subject deleted successfully');\n    } catch (error) {\n      message.error('Failed to delete subject');\n      console.error('Error deleting subject:', error);\n    }\n  };\n\n  // Fetch a single subject by ID\n  // const fetchSubject = async (id) => {\n  //     try {\n  //         const response = await getSubject(id);\n  //         return response.data;\n  //     } catch (error) {\n  //         message.error('Failed to fetch subject details');\n  //         console.error('Error fetching subject details:', error);\n  //     }\n  // };\n\n  return {\n    subjects,\n    loading,\n    addSubject,\n    editSubject,\n    removeSubject,\n    // fetchSubject,\n    fetchSubjects\n  };\n};\n_s(useSubjects, \"5I2JfhOU7S3KxTziDljV6Dma6D0=\");\nexport default useSubjects;","map":{"version":3,"names":["useState","useEffect","useCallback","getSubjects","createSubject","updateSubject","deleteSubject","getSubject","message","useSubjects","_s","subjects","setSubjects","loading","setLoading","fetchSubjects","response","data","error","console","addSubject","subject","success","editSubject","id","updatedSubjects","map","subj","removeSubject","filter"],"sources":["C:/Users/PC/Downloads/elms-cms/elms-cms/source/src/modules/Subject/useSubjects.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { getSubjects, createSubject, updateSubject, deleteSubject, getSubject } from './subjectService';\r\nimport { message } from 'antd';\r\n\r\nconst useSubjects = () => {\r\n    const [subjects, setSubjects] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // Fetch all subjects\r\n    const fetchSubjects = useCallback(async () => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await getSubjects();\r\n            setSubjects(response.data);\r\n        } catch (error) {\r\n            message.error('Failed to fetch subjects');\r\n            console.error('Error fetching subjects:', error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchSubjects();\r\n    }, [fetchSubjects]);\r\n\r\n    // Add a new subject\r\n    const addSubject = async (subject) => {\r\n        try {\r\n            const response = await createSubject(subject);\r\n            setSubjects([...subjects, response.data]);\r\n            message.success('Subject added successfully');\r\n        } catch (error) {\r\n            message.error('Failed to add subject');\r\n            console.error('Error adding subject:', error);\r\n        }\r\n    };\r\n\r\n    // Update an existing subject\r\n    const editSubject = async (id, subject) => {\r\n        try {\r\n            const response = await updateSubject(id, subject);\r\n            const updatedSubjects = subjects.map(subj => subj.id === id ? response.data : subj);\r\n            setSubjects(updatedSubjects);\r\n            message.success('Subject updated successfully');\r\n        } catch (error) {\r\n            message.error('Failed to update subject');\r\n            console.error('Error updating subject:', error);\r\n        }\r\n    };\r\n\r\n    // Delete a subject\r\n    const removeSubject = async (id) => {\r\n        try {\r\n            await deleteSubject(id);\r\n            setSubjects(subjects.filter(subject => subject.id !== id));\r\n            message.success('Subject deleted successfully');\r\n        } catch (error) {\r\n            message.error('Failed to delete subject');\r\n            console.error('Error deleting subject:', error);\r\n        }\r\n    };\r\n\r\n    // Fetch a single subject by ID\r\n    // const fetchSubject = async (id) => {\r\n    //     try {\r\n    //         const response = await getSubject(id);\r\n    //         return response.data;\r\n    //     } catch (error) {\r\n    //         message.error('Failed to fetch subject details');\r\n    //         console.error('Error fetching subject details:', error);\r\n    //     }\r\n    // };\r\n\r\n    return {\r\n        subjects,\r\n        loading,\r\n        addSubject,\r\n        editSubject,\r\n        removeSubject,\r\n        // fetchSubject,\r\n        fetchSubjects\r\n    };\r\n};\r\n\r\nexport default useSubjects;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}